---
title: "Renew and Return Rate Analysis"
author: "Iman Mousavi"
format:
  pdf:
    mainfont: Rubik
jupyter: python3
date: "2023-10-07"
execute: 
  echo: true
  cache: true
---
```{python Modules}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
```
```{python Reading the data set}
contracts = pd.read_excel('Data contracts.xlsx')
```
# Exploring Data
First, let's take a look a the head of data:
```{python First few rows }
print(contracts.head())
```
It would be wise to change farsi columns into English, but becasue of time limit, I ignore this step.

## Data Types
```{python}
print(contracts.info())
```
`contract_date`, `start_date`, and `end_date` should be transformed into datatime objects.

**NOTE:** There are missing values in columns contract_date, start_date, and region.

```{python}
contracts['contract_date'] = pd.to_datetime(contracts['contract_date'])

contracts['start_date'] = pd.to_datetime(contracts['start_date'])

contracts['end_date'] = pd.to_datetime(contracts['end_date'])
```

Checking date columns again:
```{python}
print(contracts.info())
```
We have also categorical column like industry, category, region, and city. In case of necessity, those columns will be defined as categories later.

## Unique values of each column
```{python}
print(contracts.nunique())
```
There are 8123 unqiue values of `shop_id`. Also, we have rows with the same `package_order_id`, which doesn't make a sense.
```{python}
print(contracts[contracts.duplicated(subset='package_order_id', keep=False)].\
    sort_values('package_order_id'))
```
According to `industry` and `category` columns, these two orders are different from each other; however, their `shop_id`, `package_name`, `start_date` and `end_date` and even their `city` and `region` are identical!

There must be a mistake at data entry pipeline. Due to high uncertainty, all four rows are discarded from the following analysis.

```{python}
contracts.drop_duplicates(subset='package_order_id', keep=False, inplace=True)
```
## Missing Values
```{python}
missing_conditions = contracts['contract_date'].isna() | contracts['start_date'].isna() | contracts['region'].isna()
print(contracts[missing_conditions])
```

NaT for date columns and NaN for other types are both standard ways of missingness indications.

## Month column 
```{python}
contracts['month'] = contracts['end_date'].dt.month
contracts['month'] = np.where(contracts['real_end_date'].notnull(), contracts['real_end_date'].dt.month, contracts['end_date'].dt.month)
```
Months found in this data set:
```{python}
print(contracts['month'].unique())
```
**Let's do the calculation for the last three months of year (i.e. October, November, and December).**

# Renew and Return Rate Calculation
First, a new column represents any future `start_date` for a new contract:
```{python}
contracts_sorted = contracts.sort_values(by = ['shop_id', 'start_date'])
contracts_sorted['start_date_next'] = contracts_sorted.groupby('shop_id')['start_date'].shift(-1)
```

Then, days between `end_date` of previous contract and `start_date` of new one is determined:
```{python}
contracts_sorted['days_to_new'] = contracts_sorted['start_date_next'] - contracts_sorted['end_date'] 

# If real_end_date exists:
contracts_sorted['days_to_new'] = np.where(contracts_sorted['real_end_date'].notnull(), contracts_sorted['start_date_next'] - contracts_sorted['real_end_date'], contracts_sorted['days_to_new'])

contracts_sorted['days_to_new'] = contracts_sorted['days_to_new'].dt.days
```

A new column represents whether the conditions of renewal or return have been met:
```{python}
# Renew
contracts_sorted['renew'] = contracts_sorted['days_to_new'] <= 30
# Return
contracts_sorted['return'] = contracts_sorted['days_to_new'] > 30
```

Let's filter only those rows that its `end_date` is within the last three months of year:
```{python}
condition_months = contracts_sorted['month'].isin([10, 11, 12])
contracts_endseason = contracts_sorted[condition_months]
```

Last but not least, our interested rate are calculated:
```{python}
renew_return_rates = contracts_endseason.groupby(['region', 'category', 'month'])['renew', 'return'].agg(lambda x: np.mean(x) * 100)
renew_return_rates = renew_return_rates.reset_index()
```

Renaming columns:
```{python}
renew_return_rates.rename(columns = {'renew':'renew_rate_perc', 'return':'return_rate_perc'}, inplace = True)
```

The dataframe is like the following:
```{python}
print(renew_return_rates.head())
```